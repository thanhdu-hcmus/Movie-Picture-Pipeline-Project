name: Frontend Continuous Deployment

on:
  push:
    branches: 
      - main
    paths:
      - 'starter/frontend/**'  # Trigger only if files in the frontend directory change
  workflow_dispatch:

env:
  NODE_VERSION: 18
  IMAGE_NAME: frontend
  IMAGE_TAG: latest
  FRONTEND_ECR: 670590599691.dkr.ecr.us-east-1.amazonaws.com
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Install ESLint
        run: npm install eslint --save-dev

      - name: Run lint
        run: npm run lint

  test:
    name: Unit and Integration Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  build-deploy:
    name: Build and Deploy
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ env.AWS_REGION }}

          EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Using backend URL: http://$EXTERNALIP"

          docker build --build-arg REACT_APP_MOVIE_API_URL=http://$EXTERNALIP -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.FRONTEND_ECR }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.FRONTEND_ECR }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to AWS EKS
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ env.AWS_REGION }}
          cd k8s
          kustomize edit set image frontend=${{ env.FRONTEND_ECR }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          kustomize build | kubectl apply -f -
